// Generated by CoffeeScript 1.12.1
(function() {
  var $split, CND, FS, O, PATH, badge, debug, echo, help, info, logger, map, mkdirp, parseCsv, paths, pipeline, pull, rpr, through, through2, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS/COPY-LINES';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  through2 = require('through2');

  $split = require('binary-split');

  O = {};

  O.inputs = {};

  O.outputs = {};

  O.inputs.long = PATH.resolve(__dirname, '../test-data/Unicode-NamesList.txt');

  O.inputs.short = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-short.txt');

  O.inputs.tiny = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-tiny.txt');

  O.outputs.lines = PATH.resolve(__dirname, '/tmp/basic-stream-benchmarks/lines.txt');

  mkdirp = require('mkdirp');

  pull = require('pull-stream');

  $split = require('pull-split');

  through = require('pull-through');


  /* https://github.com/dominictarr/pull-stream-examples/blob/master/compose.js */

  parseCsv = function() {
    return pull($split(), pull.map(function(line) {
      return line.split(/,\s+/);
    }));
  };

  paths = [PATH.resolve(__dirname, './copy-lines.js'), PATH.resolve(__dirname, './copy-lines-with-pull-stream.js'), PATH.resolve(__dirname, './main.js'), PATH.resolve(__dirname, './patch-event-emitter.js')];

  logger = function() {
    return function(read) {
      var next;
      debug('22201', read);
      next = function(end, data) {
        urge('20001', [end, data]);
        if (end === true) {
          return;
        }
        if (end != null) {
          throw end;
        }
        return read(null, next);
      };
      read(null, next);
      return null;
    };
  };

  
function map( read, map ) {
  //return a readable function!
  return function ( end, handler ) {
    read(end, function (end, data) {
      debug( '33344', data );
      handler(end, data != null ? map(data) : null)
    })
  }
}
;

  map = function(read, map) {
    return function(end, handler) {
      read(end, function(end, data) {
        debug('33344', data);
        handler(end, data !== null ? map(data) : null);
      });
    };
  };

  pipeline = [
    pull.values([1, 2, 3]), through(function(data) {
      var name;
      help(data);
      this.queue(data);
      return urge((function() {
        var results;
        results = [];
        for (name in this) {
          results.push(name);
        }
        return results;
      }).call(this));
    }), pull.collect(function(error, collector) {
      return info(collector);
    })
  ];

  pull.apply(null, pipeline);

  
pull(
  pull.values([1,2,3]),
  through(function (data) {
    this.queue(data * 10)
  }),
  pull.collect(function (err, ary) {
    if(err) throw err
    debug( ary );
    // t.deepEqual(ary, [10, 20, 30])
    // t.end()
  })
)
;

  pipeline = [
    pull.values([1, 2, 3]), through(function(data) {
      debug(data);
      return this.queue(data * 10);
    }), pull.collect(function(error, collector) {
      if (error != null) {
        throw error;
      }
      return debug(collector);
    })
  ];

  pull.apply(null, pipeline);

}).call(this);

//# sourceMappingURL=copy-lines-with-pull-stream.js.map
