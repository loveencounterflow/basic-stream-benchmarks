// Generated by CoffeeScript 1.11.1
(function() {
  var $as_line, $show, $split, CND, FS, O, PATH, badge, debug, format_float, format_integer, help, info, new_numeral, rpr, running_in_devtools, step, through2, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  PATH = require('path');

  FS = require('fs');

  through2 = require('through2');

  $split = require('binary-split');

  new_numeral = require('numeral');

  format_float = function(x) {
    return (new_numeral(x)).format('0,0.000');
  };

  format_integer = function(x) {
    return (new_numeral(x)).format('0,0');
  };

  step = require('coffeenode-suspend').step;

  O = {};

  O.inputs = {};

  O.inputs['long'] = PATH.resolve(__dirname, '../test-data/Unicode-NamesList.txt');

  O.inputs['short'] = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-short.txt');

  $show = function() {
    return through2(function(data, encoding, callback) {
      this.push(data);
      return callback();
    });
  };

  $as_line = function() {
    return through2(function(data, encoding, callback) {
      this.push(data + '\n');
      return callback();
    });
  };

  this.report = function(S) {
    var bps, bps_txt, byte_count_txt, dts, dts_txt, ips, ips_txt, item_count_txt;
    dts = (S.t1 - S.t0) / 1000;
    bps = S.byte_count / dts;
    ips = S.item_count / dts;
    byte_count_txt = format_integer(S.byte_count);
    item_count_txt = format_integer(S.item_count);
    dts_txt = format_float(dts);
    bps_txt = format_float(bps);
    ips_txt = format_float(ips);
    help(dts_txt + "s");
    help(byte_count_txt + " bytes / " + item_count_txt + " items");
    return help(bps_txt + " bps / " + ips_txt + " ips");
  };

  running_in_devtools = console.profile != null;

  this.start_profile = function(name) {
    if (running_in_devtools) {
      return console.profile(name);
    } else {
      return whisper('console.profile', name);
    }
  };

  this.start_profile = function(name) {
    if (running_in_devtools) {
      return console.profileEnd(name);
    } else {
      return whisper('console.profileEnd', name);
    }
  };

  this.read_with_transforms = function(n, input_name, handler) {
    var S, _, i, input, input_path, name, output, output_path, p, ref;
    input_path = O.inputs[input_name];
    if (input_path == null) {
      throw new Error("unknown input name " + (rpr(input_name)));
    }
    output_path = '/dev/null';
    input = FS.createReadStream(input_path);
    output = FS.createWriteStream(output_path);
    S = {};
    S.byte_count = 0;
    S.item_count = 0;
    S.t0 = null;
    S.t1 = null;
    name = "n:" + n;
    p = input;
    p = p.pipe($split());
    p = p.pipe(through2.obj(function(data, encoding, callback) {
      if (S.t0 == null) {
        console.profile(name);
        if (S.t0 == null) {
          S.t0 = Date.now();
        }
      }
      S.byte_count += data.length;
      S.item_count += +1;
      this.push(data);
      return callback();
    }));
    for (_ = i = 1, ref = n; i <= ref; _ = i += +1) {
      p = p.pipe(through2.obj(function(data, encoding, callback) {
        this.push(data);
        return callback();
      }));
    }
    p = p.pipe($as_line());
    p = p.pipe(output);
    output.on('close', (function(_this) {
      return function() {
        console.profileEnd(name);
        S.t1 = Date.now();
        _this.report(S);
        return handler();
      };
    })(this));
    return null;
  };

  this.main = function() {
    var input_name;
    input_name = 'short';
    return step((function(_this) {
      return function*(resume) {
        var i, run;
        for (run = i = 0; i <= 3; run = ++i) {
          yield _this.read_with_transforms(0, input_name, resume);
          yield _this.read_with_transforms(5, input_name, resume);
          yield _this.read_with_transforms(10, input_name, resume);
        }
        if (running_in_devtools) {
          return setTimeout((function() {
            return help('ok');
          }), 1e6);
        }
      };
    })(this));
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);

//# sourceMappingURL=main.js.map
