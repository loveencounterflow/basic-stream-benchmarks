// Generated by CoffeeScript 1.11.1
(function() {
  var $pass, $show, $split, CND, FS, O, PATCHER, PATH, badge, debug, echo, help, info, input, mkdirp, output, rpr, settings, stream, through2, warn, whisper, x;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS/COPY-LINES';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  through2 = require('through2');

  $split = require('binary-split');

  O = {};

  O.inputs = {};

  O.outputs = {};

  O.inputs.long = PATH.resolve(__dirname, '../test-data/Unicode-NamesList.txt');

  O.inputs.short = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-short.txt');

  O.inputs.tiny = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-tiny.txt');

  O.outputs.lines = PATH.resolve(__dirname, '/tmp/basic-stream-benchmarks/lines.txt');

  mkdirp = require('mkdirp');

  PATCHER = require('./patch-event-emitter');


  /*
  adapted from
  https://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/
   */

  stream = require('readable-stream');

  $split = function() {
    var R, last_line;
    R = new stream.Transform({
      objectMode: true
    });
    last_line = null;
    R._transform = function(chunk, encoding, done) {
      var data, lines;
      data = chunk.toString();
      if (last_line != null) {
        data = last_line + data;
      }
      lines = data.split('\n');
      last_line = (lines.splice(lines.length - 1, 1))[0];
      lines.forEach(this.push.bind(this));
      done();
    };
    R._flush = function(done) {
      if (last_line != null) {
        this.push(last_line);
      }
      last_line = null;
      done();
    };
    return R;
  };

  $show = function() {
    var R;
    R = new stream.Transform({
      objectMode: true
    });
    R._transform = function(chunk, encoding, done) {
      this.push(chunk);
      debug('11021', chunk);
      done();
    };
    return R;
  };

  $pass = function() {
    var R;
    R = new stream.Transform({
      objectMode: true
    });
    R._transform = function(chunk, encoding, done) {
      this.push(chunk);
      done();
    };
    return R;
  };

  mkdirp.sync(PATH.dirname(O.outputs.lines));

  settings = null;

  input = FS.createReadStream(O.inputs.long, settings);

  output = FS.createWriteStream(O.outputs.lines, settings);

  PATCHER.patch_timer_etc(input, output);

  x = input;

  x = x.pipe($split());

  x = x.pipe(output);

}).call(this);

//# sourceMappingURL=copy-lines.js.map
