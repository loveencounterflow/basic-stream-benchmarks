// Generated by CoffeeScript 1.12.1
(function() {
  var $, $async, $split, CND, D, FS, O, PATCHER, PATH, badge, debug, echo, help, info, input, liner, mkdirp, output, rpr, settings, step, stream, through2, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS/COPY-LINES';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  through2 = require('through2');

  $split = require('binary-split');

  step = require('coffeenode-suspend').step;

  O = {};

  O.inputs = {};

  O.outputs = {};

  O.inputs.long = PATH.resolve(__dirname, '../test-data/Unicode-NamesList.txt');

  O.inputs.short = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-short.txt');

  O.inputs.tiny = PATH.resolve(__dirname, '../test-data/Unicode-NamesList-tiny.txt');

  O.outputs.lines = PATH.resolve(__dirname, '/tmp/basic-stream-benchmarks/lines.txt');

  D = require('pipedreams');

  $ = D.$, $async = D.$async;

  mkdirp = require('mkdirp');

  PATCHER = require('./patch-event-emitter');


  /*
  adapted from
  https://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/
   */

  stream = require('stream');

  liner = new stream.Transform({
    objectMode: true
  });

  liner._transform = function(chunk, encoding, done) {
    var data, lines;
    data = chunk.toString();
    if (this._lastLineData) {
      data = this._lastLineData + data;
    }
    lines = data.split('\n');
    this._lastLineData = (lines.splice(lines.length - 1, 1))[0];
    lines.forEach(this.push.bind(this));
    done();
  };

  liner._flush = function(done) {
    if (this._lastLineData) {
      this.push(this._lastLineData);
    }
    this._lastLineData = null;
    done();
  };

  mkdirp.sync(PATH.dirname(O.outputs.lines));

  settings = {
    highWaterMark: 1e6
  };

  input = FS.createReadStream(O.inputs.long, settings);

  output = FS.createWriteStream(O.outputs.lines, settings);

  PATCHER.patch_timer_etc(input, output);

  input.pipe(output);

}).call(this);

//# sourceMappingURL=copy-lines.js.map
