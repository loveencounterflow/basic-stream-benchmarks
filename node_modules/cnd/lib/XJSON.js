// Generated by CoffeeScript 1.10.0
(function() {
  var CND, log, rpr;

  CND = require('./main');

  rpr = CND.rpr;

  log = console.log;

  this.replacer = function(key, value) {

    /* NOTE Buffers are treated specially; at this point, they are already converted into sth that looks
    like `{ type: 'Buffer', data: [ ... ], }`.
     */
    var data, local, type;
    if ((CND.isa_pod(value)) && (value['type'] === 'Buffer') && (CND.isa_list(data = value['data']))) {
      return {
        '~isa': '-x-buffer',
        '%self': data
      };
    }
    switch (type = CND.type_of(value)) {
      case 'nan':
        return {
          '~isa': '-x-nan'
        };
      case 'set':
        return {
          '~isa': '-x-set',
          '%self': Array.from(value)
        };
      case 'map':
        return {
          '~isa': '-x-map',
          '%self': Array.from(value)
        };
      case 'function':
        return {
          '~isa': '-x-function',
          '%self': value.toString()
        };
      case 'symbol':
        data = value.toString().replace(/^Symbol\((.*)\)$/, '$1');
        local = value === Symbol["for"](data);
        return {
          '~isa': '-x-symbol',
          local: local,
          '%self': data
        };
    }
    return value;
  };

  this.reviver = function(key, value) {
    var type;
    switch (type = CND.type_of(value)) {
      case '-x-nan':
        return NaN;
      case '-x-buffer':
        return Buffer.from(value['%self']);
      case '-x-set':
        return new Set(value['%self']);
      case '-x-map':
        return new Map(value['%self']);
      case '-x-function':
        return (eval("[ " + value['%self'] + " ]"))[0];
      case '-x-symbol':
        return Symbol["for"](value['%self']);
    }
    return value;
  };

  this.stringify = function(value, replacer, spaces) {
    if (replacer == null) {
      replacer = this.replacer;
    }
    return JSON.stringify(value, replacer, spaces);
  };

  this.parse = function(text, reviver) {
    if (reviver == null) {
      reviver = this.reviver;
    }
    return JSON.parse(text, reviver);
  };

  this.replacer = this.replacer.bind(this);

  this.reviver = this.reviver.bind(this);

  this.stringify = this.stringify.bind(this);

  this.parse = this.parse.bind(this);

}).call(this);

//# sourceMappingURL=XJSON.js.map
